
Code identity (signature)
=========================

How to cannonize code?

Transfrom sequences into Directed Acyclic Graphs
CryptoHash that.

Given
	(def oddp (x) (not (= 0 (mod x 2))))
Can we make
	(def pairp (x) (not (oddp x)))
have the same identity than 
	(def pairp (x) (not (= 0 (mod x 2))))
?

Integer square root
===================

https://en.wikipedia.org/wiki/Integer_square_root

Integer Log2
============

(def log2 (x)
	(set n 0)
	(while (> x 0)
		(if (= 0 (mod x 2))
			(set x (/ x 2)
				 n (+ n 1))
			(set x (- x 1)))))


Tree shacking
=============

Partial evaluator
=================

http://repository.readscheme.org/ftp/papers/pe98-school/hatcliff-DIKU-PE-summerschool.pdf
http://delivery.acm.org/10.1145/250000/243447/p480-jones.pdf?ip=132.207.247.233&id=243447&acc=ACTIVE%20SERVICE&key=FD0067F557510FFB%2EC32CC723E17B05B2%2E4D4702B0C3E38B35%2E4D4702B0C3E38B35&CFID=872252326&CFTOKEN=12745666&__acm__=1480948726_a6b42cede16460c46aa1a3738ad58b6c

1. Collect all reachable state
2. Program point specialization. For each reachable state replace the block (expression) by a specialized version of it.

(def mul (a b) (* a b))

(mul 1 x) => ((x) (* 1 x))


Probabilistic optimization
==========================

e.g. There are more chance of `this` happening than `that`.


Suspend/resume execution
========================

From the code source, we could probably figure out what is needed to stop/save/resume an ongoing function.

Where can we stop an execution?
What needs to be saved?
How do we save deeply nested function call?
How do we load deeply needed function call?
How do we stop an execution?
How do we resume an execution?

Some optimizations
==================

(set x 10
	 y 0)
(while (> x 0)
	(set x (- x 2))
	(if (pairp x)
		(set y (+ y 1))
		(set y (- y 1))))

(pairp (a) (= 0 (mod a 2)))
(mod a n) == (mod (+/- a n) n) && (set x (- x 2)) ==> (pairp x) is "constant"!
	"What changes to a parameter makes a function <<invariant>>?"

==> if's condition is always true		
==> (set y (* (/ x 2))) => (set y 5)


Analyze if a function is "functionnal"
======================================
Does it set a variable more than once? If not, then it is "functionnal".

=============================================
WTF Gödel encoding is exactly what I tried...
=============================================